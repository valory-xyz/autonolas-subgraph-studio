// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BondCalculatorUpdated extends ethereum.Event {
  get params(): BondCalculatorUpdated__Params {
    return new BondCalculatorUpdated__Params(this);
  }
}

export class BondCalculatorUpdated__Params {
  _event: BondCalculatorUpdated;

  constructor(event: BondCalculatorUpdated) {
    this._event = event;
  }

  get bondCalculator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CloseProduct extends ethereum.Event {
  get params(): CloseProduct__Params {
    return new CloseProduct__Params(this);
  }
}

export class CloseProduct__Params {
  _event: CloseProduct;

  constructor(event: CloseProduct) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get productId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CreateBond extends ethereum.Event {
  get params(): CreateBond__Params {
    return new CreateBond__Params(this);
  }
}

export class CreateBond__Params {
  _event: CreateBond;

  constructor(event: CreateBond) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get productId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get bondId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOLAS(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class CreateProduct extends ethereum.Event {
  get params(): CreateProduct__Params {
    return new CreateProduct__Params(this);
  }
}

export class CreateProduct__Params {
  _event: CreateProduct;

  constructor(event: CreateProduct) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get productId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get priceLP(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get vesting(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RedeemBond extends ethereum.Event {
  get params(): RedeemBond__Params {
    return new RedeemBond__Params(this);
  }
}

export class RedeemBond__Params {
  _event: RedeemBond;

  constructor(event: RedeemBond) {
    this._event = event;
  }

  get productId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bondId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenomicsUpdated extends ethereum.Event {
  get params(): TokenomicsUpdated__Params {
    return new TokenomicsUpdated__Params(this);
  }
}

export class TokenomicsUpdated__Params {
  _event: TokenomicsUpdated;

  constructor(event: TokenomicsUpdated) {
    this._event = event;
  }

  get tokenomics(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TreasuryUpdated extends ethereum.Event {
  get params(): TreasuryUpdated__Params {
    return new TreasuryUpdated__Params(this);
  }
}

export class TreasuryUpdated__Params {
  _event: TreasuryUpdated;

  constructor(event: TreasuryUpdated) {
    this._event = event;
  }

  get treasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Depository__depositResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getPayout(): BigInt {
    return this.value0;
  }

  getMaturity(): BigInt {
    return this.value1;
  }

  getBondId(): BigInt {
    return this.value2;
  }
}

export class Depository__getBondStatusResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getPayout(): BigInt {
    return this.value0;
  }

  getMatured(): boolean {
    return this.value1;
  }
}

export class Depository__getBondsResult {
  value0: Array<BigInt>;
  value1: BigInt;

  constructor(value0: Array<BigInt>, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getBondIds(): Array<BigInt> {
    return this.value0;
  }

  getPayout(): BigInt {
    return this.value1;
  }
}

export class Depository__mapBondProductsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: Address, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getPriceLP(): BigInt {
    return this.value0;
  }

  getVesting(): BigInt {
    return this.value1;
  }

  getToken(): Address {
    return this.value2;
  }

  getSupply(): BigInt {
    return this.value3;
  }
}

export class Depository__mapUserBondsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getAccount(): Address {
    return this.value0;
  }

  getPayout(): BigInt {
    return this.value1;
  }

  getMaturity(): BigInt {
    return this.value2;
  }

  getProductId(): BigInt {
    return this.value3;
  }
}

export class Depository extends ethereum.SmartContract {
  static bind(address: Address): Depository {
    return new Depository("Depository", address);
  }

  MIN_VESTING(): BigInt {
    let result = super.call("MIN_VESTING", "MIN_VESTING():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_VESTING(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_VESTING", "MIN_VESTING():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  bondCalculator(): Address {
    let result = super.call("bondCalculator", "bondCalculator():(address)", []);

    return result[0].toAddress();
  }

  try_bondCalculator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bondCalculator",
      "bondCalculator():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bondCounter(): BigInt {
    let result = super.call("bondCounter", "bondCounter():(uint32)", []);

    return result[0].toBigInt();
  }

  try_bondCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bondCounter", "bondCounter():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  close(productIds: Array<BigInt>): Array<BigInt> {
    let result = super.call("close", "close(uint256[]):(uint256[])", [
      ethereum.Value.fromUnsignedBigIntArray(productIds),
    ]);

    return result[0].toBigIntArray();
  }

  try_close(productIds: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("close", "close(uint256[]):(uint256[])", [
      ethereum.Value.fromUnsignedBigIntArray(productIds),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  create(
    token: Address,
    priceLP: BigInt,
    supply: BigInt,
    vesting: BigInt,
  ): BigInt {
    let result = super.call(
      "create",
      "create(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(priceLP),
        ethereum.Value.fromUnsignedBigInt(supply),
        ethereum.Value.fromUnsignedBigInt(vesting),
      ],
    );

    return result[0].toBigInt();
  }

  try_create(
    token: Address,
    priceLP: BigInt,
    supply: BigInt,
    vesting: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "create",
      "create(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(priceLP),
        ethereum.Value.fromUnsignedBigInt(supply),
        ethereum.Value.fromUnsignedBigInt(vesting),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(productId: BigInt, tokenAmount: BigInt): Depository__depositResult {
    let result = super.call(
      "deposit",
      "deposit(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromUnsignedBigInt(tokenAmount),
      ],
    );

    return new Depository__depositResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_deposit(
    productId: BigInt,
    tokenAmount: BigInt,
  ): ethereum.CallResult<Depository__depositResult> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromUnsignedBigInt(tokenAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Depository__depositResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  getBondStatus(bondId: BigInt): Depository__getBondStatusResult {
    let result = super.call(
      "getBondStatus",
      "getBondStatus(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(bondId)],
    );

    return new Depository__getBondStatusResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
    );
  }

  try_getBondStatus(
    bondId: BigInt,
  ): ethereum.CallResult<Depository__getBondStatusResult> {
    let result = super.tryCall(
      "getBondStatus",
      "getBondStatus(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(bondId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Depository__getBondStatusResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
      ),
    );
  }

  getBonds(account: Address, matured: boolean): Depository__getBondsResult {
    let result = super.call(
      "getBonds",
      "getBonds(address,bool):(uint256[],uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromBoolean(matured),
      ],
    );

    return new Depository__getBondsResult(
      result[0].toBigIntArray(),
      result[1].toBigInt(),
    );
  }

  try_getBonds(
    account: Address,
    matured: boolean,
  ): ethereum.CallResult<Depository__getBondsResult> {
    let result = super.tryCall(
      "getBonds",
      "getBonds(address,bool):(uint256[],uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromBoolean(matured),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Depository__getBondsResult(
        value[0].toBigIntArray(),
        value[1].toBigInt(),
      ),
    );
  }

  getCurrentPriceLP(token: Address): BigInt {
    let result = super.call(
      "getCurrentPriceLP",
      "getCurrentPriceLP(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toBigInt();
  }

  try_getCurrentPriceLP(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPriceLP",
      "getCurrentPriceLP(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProducts(active: boolean): Array<BigInt> {
    let result = super.call("getProducts", "getProducts(bool):(uint256[])", [
      ethereum.Value.fromBoolean(active),
    ]);

    return result[0].toBigIntArray();
  }

  try_getProducts(active: boolean): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getProducts", "getProducts(bool):(uint256[])", [
      ethereum.Value.fromBoolean(active),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isActiveProduct(productId: BigInt): boolean {
    let result = super.call(
      "isActiveProduct",
      "isActiveProduct(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(productId)],
    );

    return result[0].toBoolean();
  }

  try_isActiveProduct(productId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isActiveProduct",
      "isActiveProduct(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(productId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mapBondProducts(param0: BigInt): Depository__mapBondProductsResult {
    let result = super.call(
      "mapBondProducts",
      "mapBondProducts(uint256):(uint160,uint32,address,uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Depository__mapBondProductsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt(),
    );
  }

  try_mapBondProducts(
    param0: BigInt,
  ): ethereum.CallResult<Depository__mapBondProductsResult> {
    let result = super.tryCall(
      "mapBondProducts",
      "mapBondProducts(uint256):(uint160,uint32,address,uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Depository__mapBondProductsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt(),
      ),
    );
  }

  mapUserBonds(param0: BigInt): Depository__mapUserBondsResult {
    let result = super.call(
      "mapUserBonds",
      "mapUserBonds(uint256):(address,uint96,uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Depository__mapUserBondsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
    );
  }

  try_mapUserBonds(
    param0: BigInt,
  ): ethereum.CallResult<Depository__mapUserBondsResult> {
    let result = super.tryCall(
      "mapUserBonds",
      "mapUserBonds(uint256):(address,uint96,uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Depository__mapUserBondsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
      ),
    );
  }

  olas(): Address {
    let result = super.call("olas", "olas():(address)", []);

    return result[0].toAddress();
  }

  try_olas(): ethereum.CallResult<Address> {
    let result = super.tryCall("olas", "olas():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  productCounter(): BigInt {
    let result = super.call("productCounter", "productCounter():(uint32)", []);

    return result[0].toBigInt();
  }

  try_productCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "productCounter",
      "productCounter():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(bondIds: Array<BigInt>): BigInt {
    let result = super.call("redeem", "redeem(uint256[]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(bondIds),
    ]);

    return result[0].toBigInt();
  }

  try_redeem(bondIds: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(uint256[]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(bondIds),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenomics(): Address {
    let result = super.call("tokenomics", "tokenomics():(address)", []);

    return result[0].toAddress();
  }

  try_tokenomics(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenomics", "tokenomics():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _olas(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenomics(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _bondCalculator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeBondCalculatorCall extends ethereum.Call {
  get inputs(): ChangeBondCalculatorCall__Inputs {
    return new ChangeBondCalculatorCall__Inputs(this);
  }

  get outputs(): ChangeBondCalculatorCall__Outputs {
    return new ChangeBondCalculatorCall__Outputs(this);
  }
}

export class ChangeBondCalculatorCall__Inputs {
  _call: ChangeBondCalculatorCall;

  constructor(call: ChangeBondCalculatorCall) {
    this._call = call;
  }

  get _bondCalculator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeBondCalculatorCall__Outputs {
  _call: ChangeBondCalculatorCall;

  constructor(call: ChangeBondCalculatorCall) {
    this._call = call;
  }
}

export class ChangeManagersCall extends ethereum.Call {
  get inputs(): ChangeManagersCall__Inputs {
    return new ChangeManagersCall__Inputs(this);
  }

  get outputs(): ChangeManagersCall__Outputs {
    return new ChangeManagersCall__Outputs(this);
  }
}

export class ChangeManagersCall__Inputs {
  _call: ChangeManagersCall;

  constructor(call: ChangeManagersCall) {
    this._call = call;
  }

  get _tokenomics(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeManagersCall__Outputs {
  _call: ChangeManagersCall;

  constructor(call: ChangeManagersCall) {
    this._call = call;
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get productIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get closedProductIds(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get priceLP(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get supply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get vesting(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get payout(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get bondId(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get bondIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get payout(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
